{"ast":null,"code":"import _defineProperty from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _handleActions;var _marked=/*#__PURE__*/_regeneratorRuntime.mark(writeSaga);import{createAction,handleActions}from'redux-actions';import createRequestSaga,{createRequestActionTypes}from'../lib/createRequestSaga';import*as postsAPI from'../lib/api/posts';import{takeLatest}from'redux-saga/effects';var INITIALIZE='write/INITIALIZE';var CHANGE_FIELD='write/CHANGE_FIELD';//특정 key 값 바꾸기\nvar SET_ORIGINAL_POST='write/SET_ORIGINAL_POST';var _createRequestActionT=createRequestActionTypes('write/WRITE_POST'),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),WRITE_POST=_createRequestActionT2[0],WRTIE_SUCCESS=_createRequestActionT2[1],WRITE_FAILURE=_createRequestActionT2[2];var _createRequestActionT3=createRequestActionTypes('write/UPDATE_POST'),_createRequestActionT4=_slicedToArray(_createRequestActionT3,3),UPDATE_POST=_createRequestActionT4[0],UPDATE_POST_SUCCESS=_createRequestActionT4[1],UPDATE_POST_FAILURE=_createRequestActionT4[2];export var setOriginalPost=createAction(SET_ORIGINAL_POST,function(post){return post;});export var initalize=createAction(INITIALIZE);export var changeField=createAction(CHANGE_FIELD,function(_ref){var key=_ref.key,value=_ref.value;return{key:key,value:value};});export var writePost=createAction(WRITE_POST,function(_ref2){var title=_ref2.title,body=_ref2.body,tags=_ref2.tags;return{title:title,body:body,tags:tags};});export var updatePost=createAction(UPDATE_POST,function(_ref3){var id=_ref3.id,title=_ref3.title,body=_ref3.body,tags=_ref3.tags;return{id:id,title:title,body:body,tags:tags};});var writePostSaga=createRequestSaga(WRITE_POST,postsAPI.writePost);var updatePostSaga=createRequestSaga(UPDATE_POST,postsAPI.updatePost);export function writeSaga(){return _regeneratorRuntime.wrap(function writeSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(WRITE_POST,writePostSaga);case 2:_context.next=4;return takeLatest(UPDATE_POST,updatePostSaga);case 4:case\"end\":return _context.stop();}}},_marked);}var initialState={title:'',body:'',tags:[],post:null,postError:null,originalPostId:null};var write=handleActions((_handleActions={},_defineProperty(_handleActions,INITIALIZE,function(state){return initialState;}),_defineProperty(_handleActions,CHANGE_FIELD,function(state,_ref4){var _ref4$payload=_ref4.payload,key=_ref4$payload.key,value=_ref4$payload.value;return _objectSpread({},state,_defineProperty({},key,value));}),_defineProperty(_handleActions,WRITE_POST,function(state){return _objectSpread({},state,{post:null,postError:null});}),_defineProperty(_handleActions,WRTIE_SUCCESS,function(state,_ref5){var post=_ref5.payload;return _objectSpread({},state,{post:post});}),_defineProperty(_handleActions,WRITE_FAILURE,function(state,_ref6){var postError=_ref6.payload;return _objectSpread({},state,{postError:postError});}),_defineProperty(_handleActions,SET_ORIGINAL_POST,function(state,_ref7){var post=_ref7.payload;return _objectSpread({},state,{title:post.title,body:post.body,tags:post.tags,originalPostId:post._id});}),_defineProperty(_handleActions,UPDATE_POST_SUCCESS,function(state,_ref8){var post=_ref8.payload;return _objectSpread({},state,{post:post});}),_defineProperty(_handleActions,UPDATE_POST_FAILURE,function(state,_ref9){var postError=_ref9.payload;return _objectSpread({},state,{postError:postError});}),_handleActions),initialState);export default write;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/modules/write.js"],"names":["writeSaga","createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","SET_ORIGINAL_POST","WRITE_POST","WRTIE_SUCCESS","WRITE_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","setOriginalPost","post","initalize","changeField","key","value","writePost","title","body","tags","updatePost","id","writePostSaga","updatePostSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\n\nconst [WRITE_POST, WRTIE_SUCCESS, WRITE_FAILURE] = createRequestActionTypes(\n  'write/WRITE_POST',\n);\n\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST');\n\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\n\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\n\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({ id, title, body, tags }),\n);\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [WRITE_POST]: state => ({ ...state, post: null, postError: null }),\n    [WRTIE_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post: post,\n    }),\n    [WRITE_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({ ...state, post }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}