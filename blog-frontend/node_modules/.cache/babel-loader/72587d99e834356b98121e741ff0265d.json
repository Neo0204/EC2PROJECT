{"ast":null,"code":"import _objectSpread from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\nconst CHANGE_FIELD = 'auth/CHANEGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst _createRequestActionT = createRequestActionTypes('auth/REGISTER'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      REGISTER = _createRequestActionT2[0],\n      REGISTER_SUCCESS = _createRequestActionT2[1],\n      REGISTER_FAILURE = _createRequestActionT2[2];\n\nconst _createRequestActionT3 = createRequestActionTypes('auth/LOGIN'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LOGIN = _createRequestActionT4[0],\n      LOGIN_SUCCESS = _createRequestActionT4[1],\n      LOGIN_FAILURE = _createRequestActionT4[2];\n\nexport const changeField = createAction(CHANGE_FIELD, ({\n  form,\n  key,\n  value\n}) => ({\n  form,\n  //register,login\n  key,\n  // username,password,passwordConfirm\n  value // 실제 바꾸려는 값\n\n}));\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register, login\n\nexport const register = createAction(REGISTER, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value;\n  }),\n  [INITIALIZE_FORM]: (state, {\n    payload: {\n      form\n    }\n  }) => _objectSpread({}, state, {\n    [form]: initialState[form],\n    authError: null // form 전환 시 회원 인증 에러 초기화\n\n  }),\n  [REGISTER_SUCCESS]: (state, {\n    payload: auth\n  }) => _objectSpread({}, state, {\n    authError: null,\n    auth\n  }),\n  [REGISTER_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    authError: error\n  }),\n  [LOGIN_SUCCESS]: (state, {\n    payload: auth\n  }) => _objectSpread({}, state, {\n    authError: null,\n    auth\n  }),\n  [LOGIN_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    authError: error\n  })\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/modules/auth.js"],"names":["createAction","handleActions","produce","createRequestSaga","createRequestActionTypes","authAPI","takeLatest","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst CHANGE_FIELD = 'auth/CHANEGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n  'auth/REGISTER',\n);\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n  'auth/LOGIN',\n);\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, //register,login\n    key, // username,password,passwordConfirm\n    value, // 실제 바꾸려는 값\n  }),\n);\n\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register, login\n\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password,\n}));\n\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\n\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, draft => {\n        draft[form][key] = value;\n      }),\n    [INITIALIZE_FORM]: (state, { payload: { form } }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null, // form 전환 시 회원 인증 에러 초기화\n    }),\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n  },\n  initialState,\n);\n\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}