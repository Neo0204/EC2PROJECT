{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [WRITE_POST, WRTIE_SUCCESS, WRITE_FAILURE] = createRequestActionTypes('write/WRITE_POST');\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST');\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body,\n  tags\n}) => ({\n  title,\n  body,\n  tags\n}));\nexport const updatePost = createAction(UPDATE_POST, ({\n  id,\n  title,\n  body,\n  tags\n}) => ({\n  id,\n  title,\n  body,\n  tags\n}));\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => ({ ...state,\n    [key]: value\n  }),\n  [WRITE_POST]: state => ({ ...state,\n    post: null,\n    postError: null\n  }),\n  [WRTIE_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post: post\n  }),\n  [WRITE_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  }),\n  [SET_ORIGINAL_POST]: (state, {\n    payload: post\n  }) => ({ ...state,\n    title: post.title,\n    body: post.body,\n    tags: post.tags,\n    originalPostId: post._id\n  }),\n  [UPDATE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  [UPDATE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog-real/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","SET_ORIGINAL_POST","WRITE_POST","WRTIE_SUCCESS","WRITE_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","setOriginalPost","post","initalize","changeField","key","value","writePost","title","body","tags","updatePost","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,iBAAiB,GAAG,yBAA1B;AAEA,MAAM,CAACC,UAAD,EAAaC,aAAb,EAA4BC,aAA5B,IAA6CR,wBAAwB,CACzE,kBADyE,CAA3E;AAIA,MAAM,CACJS,WADI,EAEJC,mBAFI,EAGJC,mBAHI,IAIFX,wBAAwB,CAAC,mBAAD,CAJ5B;AAMA,OAAO,MAAMY,eAAe,GAAGf,YAAY,CAACQ,iBAAD,EAAoBQ,IAAI,IAAIA,IAA5B,CAApC;AAEP,OAAO,MAAMC,SAAS,GAAGjB,YAAY,CAACM,UAAD,CAA9B;AACP,OAAO,MAAMY,WAAW,GAAGlB,YAAY,CAACO,YAAD,EAAe,CAAC;AAAEY,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAKP,OAAO,MAAMC,SAAS,GAAGrB,YAAY,CAACS,UAAD,EAAa,CAAC;AAAEa,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,MAA4B;AAC5EF,EAAAA,KAD4E;AAE5EC,EAAAA,IAF4E;AAG5EC,EAAAA;AAH4E,CAA5B,CAAb,CAA9B;AAMP,OAAO,MAAMC,UAAU,GAAGzB,YAAY,CACpCY,WADoC,EAEpC,CAAC;AAAEc,EAAAA,EAAF;AAAMJ,EAAAA,KAAN;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAD,MAAgC;AAAEE,EAAAA,EAAF;AAAMJ,EAAAA,KAAN;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAhC,CAFoC,CAA/B;AAKP,MAAMG,aAAa,GAAGzB,iBAAiB,CAACO,UAAD,EAAaL,QAAQ,CAACiB,SAAtB,CAAvC;AACA,MAAMO,cAAc,GAAG1B,iBAAiB,CAACU,WAAD,EAAcR,QAAQ,CAACqB,UAAvB,CAAxC;AAEA,OAAO,UAAUI,SAAV,GAAsB;AAC3B,QAAMxB,UAAU,CAACI,UAAD,EAAakB,aAAb,CAAhB;AACA,QAAMtB,UAAU,CAACO,WAAD,EAAcgB,cAAd,CAAhB;AACD;AACD,MAAME,YAAY,GAAG;AACnBR,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBR,EAAAA,IAAI,EAAE,IAJa;AAKnBe,EAAAA,SAAS,EAAE,IALQ;AAMnBC,EAAAA,cAAc,EAAE;AANG,CAArB;AASA,MAAMC,KAAK,GAAGhC,aAAa,CACzB;AACE,GAACK,UAAD,GAAc4B,KAAK,IAAIJ,YADzB;AAEE,GAACvB,YAAD,GAAgB,CAAC2B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEhB,MAAAA,GAAF;AAAOC,MAAAA;AAAP;AAAX,GAAR,MAAyC,EACvD,GAAGc,KADoD;AAEvD,KAACf,GAAD,GAAOC;AAFgD,GAAzC,CAFlB;AAME,GAACX,UAAD,GAAcyB,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYlB,IAAAA,IAAI,EAAE,IAAlB;AAAwBe,IAAAA,SAAS,EAAE;AAAnC,GAAL,CANrB;AAOE,GAACrB,aAAD,GAAiB,CAACwB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEnB;AAAX,GAAR,MAA+B,EAC9C,GAAGkB,KAD2C;AAE9ClB,IAAAA,IAAI,EAAEA;AAFwC,GAA/B,CAPnB;AAWE,GAACL,aAAD,GAAiB,CAACuB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,MAAoC,EACnD,GAAGG,KADgD;AAEnDH,IAAAA;AAFmD,GAApC,CAXnB;AAeE,GAACvB,iBAAD,GAAqB,CAAC0B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEnB;AAAX,GAAR,MAA+B,EAClD,GAAGkB,KAD+C;AAElDZ,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAFsC;AAGlDC,IAAAA,IAAI,EAAEP,IAAI,CAACO,IAHuC;AAIlDC,IAAAA,IAAI,EAAER,IAAI,CAACQ,IAJuC;AAKlDQ,IAAAA,cAAc,EAAEhB,IAAI,CAACoB;AAL6B,GAA/B,CAfvB;AAsBE,GAACvB,mBAAD,GAAuB,CAACqB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEnB;AAAX,GAAR,MAA+B,EAAE,GAAGkB,KAAL;AAAYlB,IAAAA;AAAZ,GAA/B,CAtBzB;AAuBE,GAACF,mBAAD,GAAuB,CAACoB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,MAAoC,EACzD,GAAGG,KADsD;AAEzDH,IAAAA;AAFyD,GAApC;AAvBzB,CADyB,EA6BzBD,YA7ByB,CAA3B;AAgCA,eAAeG,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\n\nconst [WRITE_POST, WRTIE_SUCCESS, WRITE_FAILURE] = createRequestActionTypes(\n  'write/WRITE_POST',\n);\n\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST');\n\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\n\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\n\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({ id, title, body, tags }),\n);\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [WRITE_POST]: state => ({ ...state, post: null, postError: null }),\n    [WRTIE_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post: post,\n    }),\n    [WRITE_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({ ...state, post }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}