{"ast":null,"code":"var _jsxFileName = \"/Users/neo/Desktop/react/blog/blog-frontend/src/containers/post/PostViewerContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport { withRouter } from 'react-router-dom';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  const postId = match.params.postId;\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    post,\n    loading,\n    user\n  }) => ({\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    user: user.user\n  })),\n        post = _useSelector.post,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    dispatch(readPost(postId)); // 언마운트 될 때 리덕스에서 포스트 데이터 없애기\n\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  return React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    actionButtons: React.createElement(PostActionButtons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    ownPost: user && user._id === post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(PostViewerContainer);","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","readPost","unloadPost","PostViewer","withRouter","PostActionButtons","setOriginalPost","PostViewerContainer","match","history","postId","params","dispatch","post","loading","user","error","onEdit","push","_id","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AACA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA,QAC1CC,MAD0C,GAC/BF,KAAK,CAACG,MADyB,CAC1CD,MAD0C;AAElD,QAAME,QAAQ,GAAGb,WAAW,EAA5B;;AAFkD,uBAGXC,WAAW,CAChD,CAAC;AAAEa,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,MAA8B;AAC5BF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IADiB;AAE5BG,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFgB;AAG5BF,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAHY;AAI5BC,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAJiB,GAA9B,CADgD,CAHA;AAAA,QAG1CF,IAH0C,gBAG1CA,IAH0C;AAAA,QAGpCG,KAHoC,gBAGpCA,KAHoC;AAAA,QAG7BF,OAH6B,gBAG7BA,OAH6B;AAAA,QAGpBC,IAHoB,gBAGpBA,IAHoB;;AAYlDjB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACX,QAAQ,CAACS,MAAD,CAAT,CAAR,CADc,CAEd;;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GANQ,EAMN,CAACU,QAAD,EAAWF,MAAX,CANM,CAAT;;AAQA,QAAMO,MAAM,GAAG,MAAM;AACnBL,IAAAA,QAAQ,CAACN,eAAe,CAACO,IAAD,CAAhB,CAAR;AACAJ,IAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACD,GAHD;;AAKA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEL,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEE,KAHT;AAIE,IAAA,aAAa,EAAE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAKE,IAAA,OAAO,EAAED,IAAI,IAAIA,IAAI,CAACI,GAAL,KAAaN,IAAI,CAACO,EALrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAlCD;;AAoCA,eAAehB,UAAU,CAACG,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport { withRouter } from 'react-router-dom';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nconst PostViewerContainer = ({ match, history }) => {\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트 될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={<PostActionButtons />}\n      ownPost={user && user._id === post.id}\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n"]},"metadata":{},"sourceType":"module"}