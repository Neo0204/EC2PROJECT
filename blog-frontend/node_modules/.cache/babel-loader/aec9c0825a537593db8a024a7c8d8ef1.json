{"ast":null,"code":"import createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST';\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\nconst initialState = {\n  post: null,\n  error: null\n};\nconst post = handleActions({\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    error\n  }),\n  [UNLOAD_POST]: () => initialState\n}, initialState);\nexport default post;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog-real/blog-frontend/src/modules/post.js"],"names":["createRequestSaga","createRequestActionTypes","createAction","handleActions","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","id","unloadPost","readPostSaga","postSaga","initialState","post","error","state","payload"],"mappings":"AAAA,OAAOA,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAM,CACJC,SADI,EAEJC,iBAFI,EAGJC,iBAHI,IAIFP,wBAAwB,CAAC,gBAAD,CAJ5B;AAMA,MAAMQ,WAAW,GAAG,kBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAGR,YAAY,CAACI,SAAD,EAAYK,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGV,YAAY,CAACO,WAAD,CAA/B;AAEP,MAAMI,YAAY,GAAGb,iBAAiB,CAACM,SAAD,EAAYF,QAAQ,CAACM,QAArB,CAAtC;AAEA,OAAO,UAAUI,QAAV,GAAqB;AAC1B,QAAMT,UAAU,CAACC,SAAD,EAAYO,YAAZ,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAArB;AAEA,MAAMD,IAAI,GAAGb,aAAa,CACxB;AACE,GAACI,iBAAD,GAAqB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EAAE,GAAGE,KAAL;AAAYF,IAAAA;AAAZ,GAA/B,CADvB;AAEE,GAACR,iBAAD,GAAqB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,MAAgC,EAAE,GAAGC,KAAL;AAAYD,IAAAA;AAAZ,GAAhC,CAFvB;AAGE,GAACR,WAAD,GAAe,MAAMM;AAHvB,CADwB,EAMxBA,YANwB,CAA1B;AASA,eAAeC,IAAf","sourcesContent":["import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\n\nconst UNLOAD_POST = 'post/UNLOAD_POST';\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\n\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = { post: null, error: null };\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({ ...state, post }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}