{"ast":null,"code":"var _jsxFileName = \"/Users/neo/Desktop/react/blog-real/blog-frontend/src/containers/auth/RegisterForm.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({\n  history\n}) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(({\n    auth,\n    user\n  }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user\n  }));\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form;\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  }; // 컴포넌트가 처음 렌더링될 때 form을 초기화\n\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n  useEffect(() => {\n    if (authError) {\n      if (authError.response.status = 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n\n      console.log('회원 가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('LocalStorage is not working');\n      }\n    }\n  }, [user, history]);\n  return /*#__PURE__*/React.createElement(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default withRouter(RegisterForm);","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog-real/blog-frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","withRouter","RegisterForm","history","error","setError","dispatch","form","auth","authError","user","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","push","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(changeField({ form: 'register', key: name, value }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      if ((authError.response.status = 409)) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      console.log('회원 가입 실패');\n\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('LocalStorage is not working');\n      }\n    }\n  }, [user, history]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}