{"ast":null,"code":"import _defineProperty from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _handleActions;var _marked=/*#__PURE__*/_regeneratorRuntime.mark(postsSaga);import createRequestSaga,{createRequestActionTypes}from'../lib/createRequestSaga';import{createAction,handleActions}from'redux-actions';import*as postsAPI from'../lib/api/posts';import{takeLatest}from'redux-saga/effects';var _createRequestActionT=createRequestActionTypes('posts/LIST_POSTS'),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),LIST_POSTS=_createRequestActionT2[0],LIST_POSTS_SUCCESS=_createRequestActionT2[1],LIST_POSTS_FAILURE=_createRequestActionT2[2];export var listPosts=createAction(LIST_POSTS,function(_ref){var tags=_ref.tags,username=_ref.username,page=_ref.page;return{tags:tags,username:username,page:page};});var listPostsSaga=createRequestSaga(LIST_POSTS,postsAPI.listPosts);export function postsSaga(){return _regeneratorRuntime.wrap(function postsSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(LIST_POSTS,listPostsSaga);case 2:case\"end\":return _context.stop();}}},_marked);}var initialState={posts:null,error:null,lastPage:1};var posts=handleActions((_handleActions={},_defineProperty(_handleActions,LIST_POSTS_SUCCESS,function(state,_ref2){var posts=_ref2.payload,response=_ref2.meta;return _objectSpread({},state,{posts:posts,lastPage:parseInt(response.headers['last-page'],10)});}),_defineProperty(_handleActions,LIST_POSTS_FAILURE,function(state,_ref3){var error=_ref3.payload;return _objectSpread({},state,{error:error});}),_handleActions),initialState);export default posts;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/modules/posts.js"],"names":["postsSaga","createRequestSaga","createRequestActionTypes","createAction","handleActions","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","tags","username","page","listPostsSaga","initialState","posts","error","lastPage","state","payload","response","meta","parseInt","headers"],"mappings":"qsBAmBiBA,S,EAnBjB,MAAOC,CAAAA,iBAAP,EACEC,wBADF,KAEO,0BAFP,CAGA,OAASC,YAAT,CAAuBC,aAAvB,KAA4C,eAA5C,CACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,kBAA1B,CACA,OAASC,UAAT,KAA2B,oBAA3B,C,0BAKIJ,wBAAwB,CAAC,kBAAD,C,gEAH1BK,U,2BACAC,kB,2BACAC,kB,2BAGF,MAAO,IAAMC,CAAAA,SAAS,CAAGP,YAAY,CACnCI,UADmC,CAEnC,kBAAGI,CAAAA,IAAH,MAAGA,IAAH,CAASC,QAAT,MAASA,QAAT,CAAmBC,IAAnB,MAAmBA,IAAnB,OAA+B,CAAEF,IAAI,CAAJA,IAAF,CAAQC,QAAQ,CAARA,QAAR,CAAkBC,IAAI,CAAJA,IAAlB,CAA/B,EAFmC,CAA9B,CAKP,GAAMC,CAAAA,aAAa,CAAGb,iBAAiB,CAACM,UAAD,CAAaF,QAAQ,CAACK,SAAtB,CAAvC,CAEA,MAAO,SAAUV,CAAAA,SAAV,qIACL,MAAMM,CAAAA,UAAU,CAACC,UAAD,CAAaO,aAAb,CAAhB,CADK,sDAIP,GAAMC,CAAAA,YAAY,CAAG,CAAEC,KAAK,CAAE,IAAT,CAAeC,KAAK,CAAE,IAAtB,CAA4BC,QAAQ,CAAE,CAAtC,CAArB,CAEA,GAAMF,CAAAA,KAAK,CAAGZ,aAAa,mDAEtBI,kBAFsB,CAED,SAACW,KAAD,WAAmBH,CAAAA,KAAnB,OAAUI,OAAV,CAAgCC,QAAhC,OAA0BC,IAA1B,yBACjBH,KADiB,EAEpBH,KAAK,CAALA,KAFoB,CAGpBE,QAAQ,CAAEK,QAAQ,CAACF,QAAQ,CAACG,OAAT,CAAiB,WAAjB,CAAD,CAAgC,EAAhC,CAHE,IAFC,iCAOtBf,kBAPsB,CAOD,SAACU,KAAD,WAAmBF,CAAAA,KAAnB,OAAUG,OAAV,yBAAqCD,KAArC,EAA4CF,KAAK,CAALA,KAA5C,IAPC,kBASzBF,YATyB,CAA3B,CAYA,cAAeC,CAAAA,KAAf","sourcesContent":["import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tags, username, page }) => ({ tags, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\n\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = { posts: null, error: null, lastPage: 1 };\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10),\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\n  },\n  initialState,\n);\n\nexport default posts;\n"]},"metadata":{},"sourceType":"module"}