{"ast":null,"code":"import _objectSpread from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_POST = _createRequestActionT2[0],\n      WRTIE_SUCCESS = _createRequestActionT2[1],\n      WRITE_FAILURE = _createRequestActionT2[2];\n\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body,\n  tags\n}) => ({\n  title,\n  body,\n  tags\n}));\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: []\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [WRITE_POST]: state => _objectSpread({}, state, {\n    post: null,\n    postError: null\n  }),\n  [WRTIE_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post: post,\n    postError: null\n  }),\n  [WRITE_FAILURE]: (state, {\n    payload: postError\n  }) => _objectSpread({}, state, {\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRTIE_SUCCESS","WRITE_FAILURE","initalize","changeField","key","value","writePost","title","body","tags","writePostSaga","writeSaga","initialState","write","state","payload","post","postError"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;8BAEQJ,wBAAwB,CACzE,kBADyE,C;;MAApEK,U;MAAYC,a;MAAeC,a;;AAIlC,OAAO,MAAMC,SAAS,GAAGX,YAAY,CAACM,UAAD,CAA9B;AACP,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAD,EAAe,CAAC;AAAEM,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAKP,OAAO,MAAMC,SAAS,GAAGf,YAAY,CAACQ,UAAD,EAAa,CAAC;AAAEQ,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,MAA4B;AAC5EF,EAAAA,KAD4E;AAE5EC,EAAAA,IAF4E;AAG5EC,EAAAA;AAH4E,CAA5B,CAAb,CAA9B;AAMP,MAAMC,aAAa,GAAGjB,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACW,SAAtB,CAAvC;AAEA,OAAO,UAAUK,SAAV,GAAsB;AAC3B,QAAMf,UAAU,CAACG,UAAD,EAAaW,aAAb,CAAhB;AACD;AACD,MAAME,YAAY,GAAG;AACnBL,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMI,KAAK,GAAGrB,aAAa,CACzB;AACE,GAACK,UAAD,GAAciB,KAAK,IAAIF,YADzB;AAEE,GAACd,YAAD,GAAgB,CAACgB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEX,MAAAA,GAAF;AAAOC,MAAAA;AAAP;AAAX,GAAR,uBACXS,KADW;AAEd,KAACV,GAAD,GAAOC;AAFO,IAFlB;AAME,GAACN,UAAD,GAAce,KAAK,sBAAUA,KAAV;AAAiBE,IAAAA,IAAI,EAAE,IAAvB;AAA6BC,IAAAA,SAAS,EAAE;AAAxC,IANrB;AAOE,GAACjB,aAAD,GAAiB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,uBACZF,KADY;AAEfE,IAAAA,IAAI,EAAEA,IAFS;AAGfC,IAAAA,SAAS,EAAE;AAHI,IAPnB;AAYE,GAAChB,aAAD,GAAiB,CAACa,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,uBACZH,KADY;AAEfG,IAAAA;AAFe;AAZnB,CADyB,EAkBzBL,YAlByB,CAA3B;AAqBA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\n\nconst [WRITE_POST, WRTIE_SUCCESS, WRITE_FAILURE] = createRequestActionTypes(\n  'write/WRITE_POST',\n);\n\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [WRITE_POST]: state => ({ ...state, post: null, postError: null }),\n    [WRTIE_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post: post,\n      postError: null,\n    }),\n    [WRITE_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}