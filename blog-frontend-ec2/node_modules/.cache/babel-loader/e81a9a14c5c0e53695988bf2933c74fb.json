{"ast":null,"code":"import _objectSpread from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\n\nconst _createRequestActionT = createRequestActionTypes('user/CHECK'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      CHECK = _createRequestActionT2[0],\n      CHECK_SUCCESS = _createRequestActionT2[1],\n      CHECK_FAILURE = _createRequestActionT2[2];\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n}\nconst initialState = {\n  user: null,\n  checkError: null\n};\nexport default handleActions({\n  [TEMP_SET_USER]: (state, {\n    payload: user\n  }) => _objectSpread({}, state, {\n    user\n  }),\n  [CHECK_SUCCESS]: (state, {\n    payload: user\n  }) => _objectSpread({}, state, {\n    user,\n    checkError: null\n  }),\n  [CHECK_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    user: null,\n    checkError: error\n  })\n}, initialState);","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/modules/user.js"],"names":["createRequestSaga","createRequestActionTypes","createAction","handleActions","authAPI","takeLatest","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","user","check","checkSaga","checkFailureSaga","localStorage","removeItem","e","console","log","userSaga","initialState","checkError","state","payload","error"],"mappings":";;AAAA,OAAOA,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,aAAa,GAAG,oBAAtB;;8BAC8CL,wBAAwB,CACpE,YADoE,C;;MAA/DM,K;MAAOC,a;MAAeC,a;;AAI7B,OAAO,MAAMC,WAAW,GAAGR,YAAY,CAACI,aAAD,EAAgBK,IAAI,IAAIA,IAAxB,CAAhC;AACP,OAAO,MAAMC,KAAK,GAAGV,YAAY,CAACK,KAAD,CAA1B;AAEP,MAAMM,SAAS,GAAGb,iBAAiB,CAACO,KAAD,EAAQH,OAAO,CAACQ,KAAhB,CAAnC;;AAEA,SAASE,gBAAT,GAA4B;AAC1B,MAAI;AACFC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF;;AAED,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMf,UAAU,CAACE,KAAD,EAAQM,SAAR,CAAhB;AACA,QAAMR,UAAU,CAACI,aAAD,EAAgBK,gBAAhB,CAAhB;AACD;AAED,MAAMO,YAAY,GAAG;AACnBV,EAAAA,IAAI,EAAE,IADa;AAEnBW,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,eAAenB,aAAa,CAC1B;AACE,GAACG,aAAD,GAAiB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEb;AAAX,GAAR,uBACZY,KADY;AAEfZ,IAAAA;AAFe,IADnB;AAKE,GAACH,aAAD,GAAiB,CAACe,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEb;AAAX,GAAR,uBACZY,KADY;AAEfZ,IAAAA,IAFe;AAGfW,IAAAA,UAAU,EAAE;AAHG,IALnB;AAUE,GAACb,aAAD,GAAiB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,uBACZF,KADY;AAEfZ,IAAAA,IAAI,EAAE,IAFS;AAGfW,IAAAA,UAAU,EAAEG;AAHG;AAVnB,CAD0B,EAiB1BJ,YAjB0B,CAA5B","sourcesContent":["import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n  },\n  initialState,\n);\n"]},"metadata":{},"sourceType":"module"}