{"ast":null,"code":"var _jsxFileName = \"/Users/neo/Desktop/react/blog/blog-frontend/src/containers/write/WriteActionButtonsContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { writePost } from '../../modules/write';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { withRouter } from 'react-router-dom';\nimport { updatePost } from '../../lib/api/posts';\n\nconst WriteActionButtonsContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    write\n  }) => ({\n    title: write.title,\n    body: write.body,\n    tags: write.tags,\n    post: write.post,\n    postError: write.postError,\n    originalPostId: write.originalPostId\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        tags = _useSelector.tags,\n        post = _useSelector.post,\n        postError = _useSelector.postError,\n        originalPostId = _useSelector.originalPostId;\n\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({\n        title,\n        body,\n        tags,\n        id: originalPostId\n      }));\n    }\n\n    dispatch(writePost({\n      title,\n      body,\n      tags\n    }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  }; // 성공 혹은 실패 시 할  작업\n\n\n  useEffect(() => {\n    if (post) {\n      const _id = post._id,\n            user = post.user;\n      history.push(`/@${user.username}/${_id}`);\n    }\n\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return React.createElement(WriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(WriteActionButtonsContainer);","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/containers/write/WriteActionButtonsContainer.js"],"names":["React","useEffect","useDispatch","useSelector","writePost","WriteActionButtons","withRouter","updatePost","WriteActionButtonsContainer","history","dispatch","write","title","body","tags","post","postError","originalPostId","onPublish","id","onCancel","goBack","_id","user","push","username","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACnD,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AADmD,uBAEYC,WAAW,CACxE,CAAC;AAAEQ,IAAAA;AAAF,GAAD,MAAgB;AACdC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADC;AAEdC,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAFE;AAGdC,IAAAA,IAAI,EAAEH,KAAK,CAACG,IAHE;AAIdC,IAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJE;AAKdC,IAAAA,SAAS,EAAEL,KAAK,CAACK,SALH;AAMdC,IAAAA,cAAc,EAAEN,KAAK,CAACM;AANR,GAAhB,CADwE,CAFvB;AAAA,QAE3CL,KAF2C,gBAE3CA,KAF2C;AAAA,QAEpCC,IAFoC,gBAEpCA,IAFoC;AAAA,QAE9BC,IAF8B,gBAE9BA,IAF8B;AAAA,QAExBC,IAFwB,gBAExBA,IAFwB;AAAA,QAElBC,SAFkB,gBAElBA,SAFkB;AAAA,QAEPC,cAFO,gBAEPA,cAFO;;AAYnD,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAID,cAAJ,EAAoB;AAClBP,MAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEK,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA,IAAf;AAAqBK,QAAAA,EAAE,EAAEF;AAAzB,OAAD,CAAX,CAAR;AACD;;AACDP,IAAAA,QAAQ,CAACN,SAAS,CAAC;AAAEQ,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,KAAD,CAAV,CAAR;AACD,GALD;;AAOA,QAAMM,QAAQ,GAAG,MAAM;AACrBX,IAAAA,OAAO,CAACY,MAAR;AACD,GAFD,CAnBmD,CAsBnD;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAJ,EAAU;AAAA,YACAO,GADA,GACcP,IADd,CACAO,GADA;AAAA,YACKC,IADL,GACcR,IADd,CACKQ,IADL;AAERd,MAAAA,OAAO,CAACe,IAAR,CAAc,KAAID,IAAI,CAACE,QAAS,IAAGH,GAAI,EAAvC;AACD;;AACD,QAAIN,SAAJ,EAAe;AACbU,MAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACD;AACF,GARQ,EAQN,CAACP,OAAD,EAAUM,IAAV,EAAgBC,SAAhB,CARM,CAAT;AASA,SAAO,oBAAC,kBAAD;AAAoB,IAAA,SAAS,EAAEE,SAA/B;AAA0C,IAAA,QAAQ,EAAEE,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAjCD;;AAmCA,eAAed,UAAU,CAACE,2BAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { writePost } from '../../modules/write';\n\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { withRouter } from 'react-router-dom';\nimport { updatePost } from '../../lib/api/posts';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n    }\n    dispatch(writePost({ title, body, tags }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n  // 성공 혹은 실패 시 할  작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return <WriteActionButtons onPublish={onPublish} onCancel={onCancel} />;\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n"]},"metadata":{},"sourceType":"module"}