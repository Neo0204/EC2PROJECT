{"ast":null,"code":"import _slicedToArray from \"/Users/neo/Desktop/react/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/neo/Desktop/react/blog/blog-frontend/src/containers/auth/RegisterForm.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register, authSaga } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({\n  history\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        setError = _useState2[1];\n\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    auth,\n    user\n  }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user\n  })),\n        form = _useSelector.form,\n        auth = _useSelector.auth,\n        authError = _useSelector.authError,\n        user = _useSelector.user;\n\n  const onChange = e => {\n    const _e$target = e.target,\n          value = _e$target.value,\n          name = _e$target.name;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const username = form.username,\n          password = form.password,\n          passwordConfirm = form.passwordConfirm;\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      });\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  }; // 컴포넌트가 처음 렌더링될 때 form을 초기화\n\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n  useEffect(() => {\n    if (authError) {\n      if (authError.response.status = 409) {\n        setError('이미 존재하는 계정명입니다.');\n      }\n\n      console.log('오류 발생');\n      console.log(authError);\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n    }\n  }, [user, history]);\n  return React.createElement(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(RegisterForm);","map":{"version":3,"sources":["/Users/neo/Desktop/react/blog/blog-frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","authSaga","AuthForm","check","withRouter","RegisterForm","history","error","setError","dispatch","auth","user","form","authError","onChange","e","target","value","name","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  changeField,\n  initializeForm,\n  register,\n  authSaga,\n} from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(changeField({ form: 'register', key: name, value }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({ form: 'register', key: 'password', value: '' });\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      if ((authError.response.status = 409)) {\n        setError('이미 존재하는 계정명입니다.');\n      }\n      console.log('오류 발생');\n      console.log(authError);\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n    }\n  }, [user, history]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}