{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","modules/posts.js","lib/api/posts.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","modules/write.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/Editor.js","containers/write/EditorContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledLink","Link","StyledButton","button","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","logout","post","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","tags","page","listPostsSaga","queryString","qs","stringify","posts","lastPage","parseInt","headers","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","map","tag","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","withRouter","location","useEffect","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","ErrorMessage","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","id","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","onCancel","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","onRemove","modal","setModal","writeSaga","WRITE_POST","WRTIE_SUCCESS","WRITE_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","setOriginalPost","initalize","writePost","updatePost","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","match","postId","params","ownPost","a","async","delete","PostPage","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","useCallback","nextTags","filter","t","trim","placeholde","TagBoxContainer","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","EditorContainer","WriteActionButtonsBlock","WriteActionButtons","onPublish","isEdit","goBack","WritePage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kuBAGA,IAAMA,EAAkBC,IAAOC,IAAV,KAsBNC,EANI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAaC,EAAW,4BAG5C,OAAO,kBAACL,EAAoBK,EAAOD,ICOtBE,EA3BC,CACdC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,u8BCpBJ,IAAMC,EAAcC,YAAH,IASDJ,EAAQC,KAAK,GAEXD,EAAQC,KAAK,GAIbD,EAAQC,KAAK,GAClBD,EAAQC,KAAK,IAItB,SAAAI,GAAK,OACLA,EAAMC,WACNF,YADA,QAQA,SAAAC,GAAK,OACLA,EAAMH,MACNE,YADA,IAEgBJ,EAAQE,KAAK,GAEXF,EAAQE,KAAK,OAI7BK,EAAaZ,YAAOa,IAAPb,CAAH,IACZQ,GAGEM,EAAed,IAAOe,OAAV,IACdP,GAUWQ,EARA,SAAAN,GACb,OAAOA,EAAMO,GACX,kBAACL,EAAD,iBAAgBF,EAAhB,CAAuBH,KAAMG,EAAMH,KAAO,EAAI,KAE9C,kBAACO,EAAiBJ,I,6rBChDtB,I,EAAMQ,EAAclB,IAAOC,IAAV,KASXkB,EAAUnB,YAAOE,EAAPF,CAAH,KAiBPoB,EAASpB,IAAOC,IAAV,KAINoB,EAAWrB,IAAOC,IAAV,KA6BCqB,EAzBA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACtB,OACE,oCACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAMF,GAAG,IAAIQ,UAAU,QAAvB,YAGCF,EACC,yBAAKE,UAAU,SACb,kBAACJ,EAAD,KAAWE,EAAKG,UAChB,kBAAC,EAAD,CAAQC,QAASH,GAAjB,6BAGF,yBAAKC,UAAU,SACb,kBAAC,EAAD,CAAQR,GAAG,UAAX,yBAKR,kBAACG,EAAD,Q,yDCvDOQ,EAAeC,YAHN,yBAKpB,SAAAC,GAAW,OAAIA,KAGJC,EAAgBF,YAPN,0BASrB,SAAAC,GAAW,OAAIA,KAmBFE,EAdCC,aAAa,mBAfP,yBAiBD,SAACC,EAAOC,GAAR,sBACZD,EADY,eAEdC,EAAOC,SAAU,OAJK,cAdN,0BAoBD,SAACF,EAAOC,GAAR,sBACbD,EADa,eAEfC,EAAOC,SAAU,OARK,GAFR,I,QCZRC,EAA2B,SAAAC,GAGtC,MAAO,CAACA,EAFK,UAAMA,EAAN,YACA,UAAMA,EAAN,cAIA,SAASC,EAAkBD,EAAME,GAC9C,IAAMC,EAAO,UAAMH,EAAN,YACPI,EAAO,UAAMJ,EAAN,YAEb,iBAAO,WAAUH,GAAV,uEACL,OADK,SACCQ,YAAIf,EAAaU,IADlB,OAGc,OAHd,kBAGoBM,YAAKJ,EAASL,EAAOC,SAHzC,OAIH,OADMS,EAHH,gBAIGF,YAAI,CAAEL,KAAMG,EAASL,QAASS,EAASC,KAAMC,KAAMF,IAJtD,+BAMH,OANG,oCAMGF,YAAI,CAAEL,KAAMI,EAASN,QAAQ,EAAD,GAAKY,OAAO,IAN3C,QAQL,OARK,UAQCL,YAAIZ,EAAcO,IARnB,yD,cCMMW,E,OAjBAC,EAAMC,SCQRC,EAAS,kBAAMH,EAAOI,KAAK,qB,WCgB9BC,I,YAQOC,I,GA1B6BlB,EAC5C,c,qBADKmB,G,MAAOC,G,MAAeC,G,MAGvBC,GAAS,cAEFC,GAAc/B,YANL,sBAMiC,SAAAN,GAAI,OAAIA,KAClDsC,GAAQhC,YAAa2B,IACrBJ,GAASvB,YAAa8B,IAE7BG,GAAYvB,EAAkBiB,IDTf,kBAAMP,EAAOc,IAAI,sBCWtC,SAASC,KACP,IACEC,aAAaC,WAAW,QACxB,MAAOC,GACPC,QAAQC,IAAI,gCAGhB,SAAUf,KAAV,iEAEI,OAFJ,kBAEUV,YAAK0B,GAFf,OAGIL,aAAaC,WAAW,QAH5B,+CAKIE,QAAQC,IAAR,MALJ,oDAQO,SAAUd,KAAV,iEACL,OADK,SACCgB,YAAWf,GAAOM,IADnB,OAEL,OAFK,SAECS,YAAWb,GAAeM,IAF3B,OAGL,OAHK,SAGCO,YAAWZ,GAAQL,IAHpB,wCAMP,I,GAKerB,gBAAa,iBAAC,EAtCP,sBAwCD,SAACC,EAAD,OAAmBX,EAAnB,EAAUa,QAAV,sBACZF,EADY,CAEfX,YAJsB,YAAC,EAMxBkC,IAAgB,SAACvB,EAAD,OAAmBX,EAAnB,EAAUa,QAAV,sBACZF,EADY,CAEfX,OACAiD,WAAY,UATU,YAAC,EAWxBd,IAAgB,SAACxB,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,sBACZF,EADY,CAEfX,KAAM,KACNiD,WAAYxB,OAdU,YAAC,EAgBxBW,IAAS,SAAAzB,GAAK,sBAAUA,EAAV,CAAiBX,KAAM,UAhBd,GALP,CACnBA,KAAM,KACNiD,WAAY,OC5BCC,GAVS,WAAO,IACrBlD,EAASmD,aAAY,kBAAe,CAAEnD,KAAjB,EAAGA,KAAyBA,SAAjDA,KAEFoD,EAAWC,cAIjB,OAAO,kBAAC,EAAD,CAAQrD,KAAMA,EAAMC,SAHV,WACfmD,EAASvB,U,gCCUIyB,I,GATbxC,EAAyB,oB,qBAH3ByC,G,MACAC,G,MACAC,G,MAGWC,GAAYpD,YACvBiD,IACA,kBAA+B,CAAEI,KAAjC,EAAGA,KAAoCxD,SAAvC,EAASA,SAAwCyD,KAAjD,EAAmBA,SAGfC,GAAgB7C,EAAkBuC,ICVf,SAAC,GAA8B,IAA5BK,EAA2B,EAA3BA,KAAMzD,EAAqB,EAArBA,SAAUwD,EAAW,EAAXA,KACpCG,EAAcC,KAAGC,UAAU,CAAEJ,OAAMzD,WAAUwD,SACnD,OAAOjC,EAAOc,IAAP,qBAAyBsB,ODU3B,SAAUR,KAAV,iEACL,OADK,SACCN,YAAWO,GAAYM,IADxB,wCAIP,IAceI,GAZDvD,aAAa,kBAAC,GAEvB8C,IAAqB,SAAC7C,EAAD,OAAmBsD,EAAnB,EAAUpD,QAAsBS,EAAhC,EAA0BE,KAA1B,sBACjBb,EADiB,CAEpBsD,QACAC,SAAUC,SAAS7C,EAAS8C,QAAQ,aAAc,SAL7B,YAAC,GAOvBX,IAAqB,SAAC9C,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,sBAAqCF,EAArC,CAA4Cc,aAP3C,IAFN,CAAEwC,MAAO,KAAMxC,MAAO,KAAMyC,SAAU,I,8dElB3D,IAAMG,GAAe5F,IAAOC,IAAV,MACd,SAAAS,GAAK,OACLA,EAAMmF,cACNpF,YADA,QAIOJ,EAAQC,KAAK,GAEXD,EAAQC,KAAK,IAoBXwF,GAbC,SAAC,GAA+C,IAA7CpE,EAA4C,EAA5CA,SAAUqE,EAAkC,EAAlCA,cAAeF,EAAmB,EAAnBA,aAC1C,OACE,kBAACD,GAAD,CAAcC,aAAcA,GAC1B,8BACE,2BACE,kBAAC,IAAD,CAAM5E,GAAE,YAAOS,IAAaA,KAGhC,8BAAO,IAAIsE,KAAKD,GAAeE,wB,4PCvBrC,IAAMC,GAAYlG,IAAOC,IAAV,KAIFI,EAAQE,KAAK,GAIXF,EAAQC,KAAK,IAiBb6F,GAZF,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KACd,OACE,kBAACgB,GAAD,KACGhB,EAAKkB,KAAI,SAAAC,GAAG,OACX,kBAAC,IAAD,CAAM5E,UAAU,MAAMR,GAAE,gBAAWoF,GAAOC,IAAKD,GAA/C,IACIA,Q,+qBCdZ,IAAME,GAAgBvG,YAAOE,EAAPF,CAAH,MAIbwG,GAAyBxG,IAAOC,IAAV,MAMtBwG,GAAgBzG,IAAOC,IAAV,KAQSI,EAAQC,KAAK,GAQ1BD,EAAQC,KAAK,IAQtBoG,GAAW,SAAC,GAAc,IAAZrD,EAAW,EAAXA,KACV0C,EAAgD1C,EAAhD0C,cAAexE,EAAiC8B,EAAjC9B,KAAM2D,EAA2B7B,EAA3B6B,KAAMyB,EAAqBtD,EAArBsD,MAAOC,EAAcvD,EAAduD,KAAMC,EAAQxD,EAARwD,IAChD,OACE,kBAACJ,GAAD,KACE,4BACE,kBAAC,IAAD,CAAMxF,GAAE,YAAOM,EAAKG,SAAZ,YAAwBmF,IAAQF,IAE1C,kBAAC,GAAD,CACEjF,SAAUH,EAAKG,SACfqE,cAAe,IAAIC,KAAKD,KAE1B,kBAAC,GAAD,CAAMb,KAAMA,IACZ,2BAAI0B,KA+BKE,GA1BE,SAAC,GAAgD,IAA9CtB,EAA6C,EAA7CA,MAAOxD,EAAsC,EAAtCA,QAASgB,EAA6B,EAA7BA,MAAO+D,EAAsB,EAAtBA,gBACzC,OAAI/D,EACK,kBAACuD,GAAD,iEAIP,kBAACA,GAAD,KACE,kBAACC,GAAD,KACGO,GACC,kBAAC,EAAD,CAAQxG,MAAI,EAACU,GAAG,UAAhB,4CAMFe,GAAWwD,GACX,6BACGA,EAAMY,KAAI,SAAA/C,GAAI,OACb,kBAAC,GAAD,CAAUA,KAAMA,EAAMiD,IAAKjD,EAAKwD,YC7C7BG,gBA3BW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrBtC,EAAWC,cADyB,EAEFF,aACtC,gBAAGc,EAAH,EAAGA,MAAOxD,EAAV,EAAUA,QAAST,EAAnB,EAAmBA,KAAnB,MAA+B,CAC7BiE,MAAOA,EAAMA,MACbxC,MAAOwC,EAAMxC,MACbhB,QAASA,EAAQ,oBACjBT,KAAMA,EAAKA,SALPiE,EAFkC,EAElCA,MAAOxC,EAF2B,EAE3BA,MAAOhB,EAFoB,EAEpBA,QAAST,EAFW,EAEXA,KAe/B,OANA2F,qBAAU,WAAO,IAAD,EACkB5B,KAAG6B,MAAMF,EAASG,OAAQ,CACxDC,mBAAmB,IADbhB,EADM,EACNA,IAAK3E,EADC,EACDA,SAAUyD,EADT,EACSA,KAGvBR,EAASM,GAAU,CAAEoB,MAAK3E,WAAUyD,YACnC,CAACR,EAAUsC,EAASG,SAErB,kBAAC,GAAD,CACEpF,QAASA,EACTgB,MAAOA,EACPwC,MAAOA,EACPuB,gBAAiBxF,O,iQCxBvB,IAAM+F,GAAkBtH,IAAOC,IAAV,MAQfsH,GAAavH,IAAOC,IAAV,MAEVuH,GAAY,SAAC,GAA6B,IAA3B9F,EAA0B,EAA1BA,SAAU2E,EAAgB,EAAhBA,IAAKlB,EAAW,EAAXA,KAC5BsC,EAAQnC,KAAGC,UAAU,CAAEc,MAAKlB,SAClC,OAAOzD,EAAQ,YAAQA,EAAR,YAAoB+F,GAApB,YAAmCA,IA6BrCC,GA1BI,SAAC,GAAuC,IAArCvC,EAAoC,EAApCA,KAAMM,EAA8B,EAA9BA,SAAU/D,EAAoB,EAApBA,SAAU2E,EAAU,EAAVA,IAC9C,OACE,kBAACiB,GAAD,KACE,kBAAC,EAAD,CACEK,SAAmB,IAATxC,EACVlE,GACW,IAATkE,OAAayC,EAAYJ,GAAU,CAAE9F,WAAU2E,MAAKlB,KAAMA,EAAO,KAHrE,gBAQA,kBAACoC,GAAD,KAAapC,GACb,kBAAC,EAAD,CACEwC,SAAUxC,IAASM,EACnBxE,GACEkE,IAASM,OACLmC,EACAJ,GAAU,CAAE9F,WAAU2E,MAAKlB,KAAMA,EAAO,KALhD,kBCLS6B,gBArBa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACPvC,aAAY,gBAAGc,EAAH,EAAGA,MAAOxD,EAAV,EAAUA,QAAV,MAAyB,CACxEyD,SAAUD,EAAMC,SAChBD,MAAOA,EAAMA,MACbxD,QAASA,EAAQ,wBAHXyD,EADoC,EACpCA,SAAUD,EAD0B,EAC1BA,MAAOxD,EADmB,EACnBA,QAKzB,IAAKwD,GAASxD,EAAS,OAAO,KANc,MAQRsD,KAAG6B,MAAMF,EAASG,OAAQ,CAC5DC,mBAAmB,IADbhB,EARoC,EAQpCA,IAAK3E,EAR+B,EAQ/BA,SAR+B,IAQrByD,YARqB,MAQd,EARc,EAW5C,OACE,kBAAC,GAAD,CACEkB,IAAKA,EACL3E,SAAUA,EACVyD,KAAMO,SAASP,EAAM,IACrBM,SAAUA,OCNDoC,GAVM,WACnB,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,miCCNN,I,GAAMC,GAAoB9H,IAAOC,IAAV,KAOPI,EAAQC,KAAK,IASvByH,GAAW/H,IAAOC,IAAV,MAgCC+H,GAbM,SAAC,GAAkB,IAAhB7H,EAAe,EAAfA,SACtB,OACE,kBAAC2H,GAAD,KACE,kBAACC,GAAD,KACE,yBAAKtG,UAAU,aACb,kBAAC,IAAD,CAAMR,GAAG,KAAT,aAEDd,K,qBCJQ8H,I,GA/BsC5F,EACrD,iB,qBADK6F,G,MAAUC,G,MAAkBC,G,SAIW/F,EAC5C,c,qBADKgG,G,MAAOC,G,MAAeC,G,MAIhBC,GAAc3G,YAXN,sBAanB,kBAA2B,CACzB4G,KADF,EAAGA,KAEDnC,IAFF,EAASA,IAGPoC,MAHF,EAAcA,UAOHC,GAAiB9G,YAnBN,wBAmBoC,SAAA4G,GAAI,OAAIA,KAEvDG,GAAW/G,YAAaqG,IAAU,kBAA6B,CAC1ExG,SAD6C,EAAGA,SAEhDmH,SAF6C,EAAaA,aAI/CC,GAAQjH,YAAawG,IAAO,kBAA6B,CACpE3G,SADuC,EAAGA,SAE1CmH,SAFuC,EAAaA,aAKhDE,GAAexG,EAAkB2F,IblCf,SAAC,GAAD,IAAGxG,EAAH,EAAGA,SAAUmH,EAAb,EAAaA,SAAb,OACtB5F,EAAOI,KAAK,qBAAsB,CAAE3B,WAAUmH,gBakC1CG,GAAYzG,EAAkB8F,IbtCf,SAAC,GAAD,IAAG3G,EAAH,EAAGA,SAAUmH,EAAb,EAAaA,SAAb,OACnB5F,EAAOI,KAAK,kBAAmB,CAAE3B,WAAUmH,gBauCtC,SAAUZ,KAAV,iEACL,OADK,SACC1D,YAAW2D,GAAUa,IADtB,OAEL,OAFK,SAECxE,YAAW8D,GAAOW,IAFnB,wCAKP,IAAMC,GAAe,CACnBL,SAAU,CACRlH,SAAU,GACVmH,SAAU,GACVK,gBAAiB,IAEnBJ,MAAO,CACLpH,SAAU,GACVmH,SAAU,IAEZM,KAAM,KACNC,UAAW,MAoCED,GAjCFlH,aAAa,kBAAC,GArDN,sBAuDD,SAACC,EAAD,WAAUE,QAAWqG,EAArB,EAAqBA,KAAMnC,EAA3B,EAA2BA,IAAKoC,EAAhC,EAAgCA,MAAhC,OACdW,aAAQnH,GAAO,SAAAoH,GACbA,EAAMb,GAAMnC,GAAOoC,QAJD,YAAC,GApDH,wBA0DD,SAACxG,EAAD,SAAqBuG,EAArB,EAAUrG,QAAWqG,KAArB,sBACdvG,GADc,mBAEhBuG,EAAOQ,GAAaR,IAFJ,0BAGN,MAHM,OANG,YAAC,GAWtBN,IAAmB,SAACjG,EAAD,OAAmBiH,EAAnB,EAAU/G,QAAV,sBACfF,EADe,CAElBkH,UAAW,KACXD,YAdoB,YAAC,GAgBtBf,IAAmB,SAAClG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,sBACfF,EADe,CAElBkH,UAAWpG,OAlBS,YAAC,GAoBtBsF,IAAgB,SAACpG,EAAD,OAAmBiH,EAAnB,EAAU/G,QAAV,sBACZF,EADY,CAEfkH,UAAW,KACXD,YAvBoB,YAAC,GAyBtBZ,IAAgB,SAACrG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,sBACZF,EADY,CAEfkH,UAAWpG,OA3BS,IA8BxBiG,I,otCCrFF,I,GAAMM,GAAevJ,IAAOC,IAAV,MAOZuJ,GAAgBxJ,IAAOC,IAAV,KAGNI,EAAQC,KAAK,IAMpBmJ,GAAczJ,IAAO0J,MAAV,KAKYrJ,EAAQC,KAAK,GAOXD,EAAQC,KAAK,IAOtCqJ,GAAS3J,IAAOC,IAAV,KAKCI,EAAQC,KAAK,GAGXD,EAAQC,KAAK,IAKtBsJ,GAAsB5J,YAAOgB,EAAPhB,CAAH,MAGnB6J,GAAU,CAAEf,MAAO,qBAAOF,SAAU,4BAkD3BkB,GAhDE,SAAC,GAA+C,IAA7CxH,EAA4C,EAA5CA,KAAMmG,EAAsC,EAAtCA,KAAMsB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUhH,EAAY,EAAZA,MAC5CiH,EAAOJ,GAAQvH,GAErB,OACE,kBAACkH,GAAD,KACE,4BAAKS,GACL,8BACE,kBAACR,GAAD,CACES,aAAa,WACbC,KAAK,WACLC,YAAY,qBACZL,SAAUA,EACVrB,MAAOD,EAAK/G,WAEd,kBAAC+H,GAAD,CACES,aAAa,eACbC,KAAK,WACLC,YAAY,2BACZ9H,KAAK,WACLyH,SAAUA,EACVrB,MAAOD,EAAKI,WAEJ,aAATvG,GACC,kBAACmH,GAAD,CACES,aAAa,eACbC,KAAK,kBACLC,YAAY,wCACZ9H,KAAK,WACLyH,SAAUA,EACVrB,MAAOD,EAAKS,kBAGflG,GAAS,kBAACuG,GAAD,KAAevG,GACzB,kBAAC4G,GAAD,CAAqBrJ,MAAI,EAACI,WAAS,EAACgB,QAASqI,GAC1CC,IAGL,kBAACN,GAAD,KACY,UAATrH,EACC,kBAAC,IAAD,CAAMrB,GAAG,aAAT,4BAEA,kBAAC,IAAD,CAAMA,GAAG,UAAT,yBC7BK+F,gBAhEG,SAAC,GAAiB,IAAfqD,EAAc,EAAdA,QACb1F,EAAWC,cADgB,EAEOF,aAAY,gBAAGyE,EAAH,EAAGA,KAAM5H,EAAT,EAASA,KAAT,MAAqB,CACvEkH,KAAMU,EAAKL,MACXK,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChB7H,KAAMA,EAAKA,SAJLkH,EAFyB,EAEzBA,KAAMU,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,UAAW7H,EAFE,EAEFA,KAFE,EASP+I,mBAAS,MATF,mBAS1BtH,EAT0B,KASnBuH,EATmB,KAqDjC,OA/BArD,qBAAU,WACRvC,EAASgE,GAAe,YACvB,CAAChE,IAEJuC,qBAAU,WACR,GAAIkC,EAIF,OAHAhF,QAAQC,IAAI,6BACZD,QAAQC,IAAI+E,QACZmB,EAAS,mCAIPpB,IACF/E,QAAQC,IAAI,sBACZM,EAASd,SAEV,CAACsF,EAAMC,EAAWzE,IAErBuC,qBAAU,WACR,GAAI3F,EAAM,CACR6C,QAAQC,IAAI,0BACZD,QAAQC,IAAI9C,GACZ8I,EAAQG,KAAK,KACb,IACEvG,aAAawG,QAAQ,OAAQC,KAAKnF,UAAUhE,IAC5C,MAAO4C,GACPC,QAAQC,IAAI,mCAGf,CAAC9C,EAAM8I,IAGR,kBAAC,GAAD,CACE/H,KAAK,QACLmG,KAAMA,EACNsB,SA9Ca,SAAA5F,GAAM,IAAD,EACIA,EAAEwG,OAAlBjC,EADY,EACZA,MAAOyB,EADK,EACLA,KACfxF,EAAS6D,GAAY,CAAEC,KAAM,QAASnC,IAAK6D,EAAMzB,YA6C/CsB,SA1Ca,SAAA7F,GACfA,EAAEyG,iBADkB,IAEZlJ,EAAuB+G,EAAvB/G,SAAUmH,EAAaJ,EAAbI,SAClBlE,EAASmE,GAAM,CAAEpH,WAAUmH,eAwCzB7F,MAAOA,OCtDE6H,GARG,WAChB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,QC+ES7D,gBA/EM,SAAC,GAAiB,IAAfqD,EAAc,EAAdA,QAAc,EACVC,mBAAS,MADC,mBAC7BtH,EAD6B,KACtBuH,EADsB,KAE9B5F,EAAWC,cAFmB,EAGIF,aAAY,gBAAGyE,EAAH,EAAGA,KAAM5H,EAAT,EAASA,KAAT,MAAqB,CACvEkH,KAAMU,EAAKP,SACXO,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChB7H,KAAMA,EAAKA,SAJLkH,EAH4B,EAG5BA,KAAMU,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,UAAW7H,EAHK,EAGLA,KAiE/B,OAnCA2F,qBAAU,WACRvC,EAASgE,GAAe,eACvB,CAAChE,IAEJuC,qBAAU,WACR,GAAIkC,EACF,OAAKA,EAAUvG,SAASiI,OAAS,UAC/BP,EAAS,oFAGXnG,QAAQC,IAAI,0CAKV8E,IACF/E,QAAQC,IAAI,yCACZD,QAAQC,IAAI8E,GACZxE,EAASd,SAEV,CAACsF,EAAMC,EAAWzE,IAErBuC,qBAAU,WACR,GAAI3F,EAAM,CACR6C,QAAQC,IAAI,0BACZD,QAAQC,IAAI9C,GACZ8I,EAAQG,KAAK,KACb,IACEvG,aAAawG,QAAQ,OAAQC,KAAKnF,UAAUhE,IAC5C,MAAO4C,GACPC,QAAQC,IAAI,mCAGf,CAAC9C,EAAM8I,IAGR,kBAAC,GAAD,CACE/H,KAAK,WACLmG,KAAMA,EACNsB,SA9Da,SAAA5F,GAAM,IAAD,EACIA,EAAEwG,OAAlBjC,EADY,EACZA,MAAOyB,EADK,EACLA,KACfxF,EAAS6D,GAAY,CAAEC,KAAM,WAAYnC,IAAK6D,EAAMzB,YA6DlDsB,SA1Da,SAAA7F,GACfA,EAAEyG,iBADkB,IAEZlJ,EAAwC+G,EAAxC/G,SAAUmH,EAA8BJ,EAA9BI,SAAUK,EAAoBT,EAApBS,gBAC5B,IAAI,CAACxH,EAAUmH,EAAUK,GAAiB6B,SAAS,IAInD,OAAIlC,IAAaK,GACfqB,EAAS,qFACT5F,EAAS6D,GAAY,CAAEC,KAAM,WAAYnC,IAAK,WAAYoC,MAAO,WACjE/D,EACE6D,GAAY,CAAEC,KAAM,WAAYnC,IAAK,kBAAmBoC,MAAO,YAInE/D,EAASiE,GAAS,CAAElH,WAAUmH,cAX5B0B,EAAS,oEAuDTvH,MAAOA,OCrEEgI,GARM,WACnB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,Q,YCaWC,I,GATb5I,EAAyB,kB,qBAH3B6I,G,MACAC,G,MACAC,G,MAKWC,GAAWxJ,YAAaqJ,IAAW,SAAAI,GAAE,OAAIA,KACzCC,GAAa1J,YAHN,oBAKd2J,GAAejJ,EAAkB2I,Ifbf,SAAAI,GAAE,OAAIrI,EAAOc,IAAP,qBAAyBuH,OeehD,SAAUL,KAAV,iEACL,OADK,SACC1G,YAAW2G,GAAWM,IADvB,wCAIP,IAAMvC,GAAe,CAAE5F,KAAM,KAAML,MAAO,MAW3BK,GATFpB,aAAa,kBAAC,GAEtBkJ,IAAoB,SAACjJ,EAAD,OAAmBmB,EAAnB,EAAUjB,QAAV,sBAAoCF,EAApC,CAA2CmB,YAF1C,YAAC,GAGtB+H,IAAoB,SAAClJ,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,sBAAqCF,EAArC,CAA4Cc,aAH3C,YAAC,GAbP,oBAiBD,kBAAMiG,MAJC,IAMxBA,I,6bCzBF,IAAMwC,GAAkBzL,IAAOC,IAAV,MAIfyL,GAAW1L,IAAOC,IAAV,KACeI,EAAQC,KAAK,IASpCqL,GAAc3L,IAAOC,IAAV,KAENI,EAAQC,KAAK,IAmCTsL,GAhCI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,cAAexI,EAA2B,EAA3BA,KAAML,EAAqB,EAArBA,MAAOhB,EAAc,EAAdA,QAChD,GAAIgB,EACF,OAAIA,EAAMH,UAAsC,MAA1BG,EAAMH,SAASiI,OAC5B,kBAACW,GAAD,qFAEF,kBAACA,GAAD,mCAET,GAAIzJ,IAAYqB,EACd,OAAO,KARqD,IAWtDsD,EAA2CtD,EAA3CsD,MAAOC,EAAoCvD,EAApCuD,KAAMrF,EAA8B8B,EAA9B9B,KAAMwE,EAAwB1C,EAAxB0C,cAAeb,EAAS7B,EAAT6B,KAC1C,OACE,kBAACuG,GAAD,KACE,kBAAC,KAAD,KACE,+BAAQ9E,EAAR,eAEF,kBAAC+E,GAAD,KACE,4BAAK/E,GACL,kBAAC,GAAD,CACEjF,SAAUH,EAAKG,SACfqE,cAAeA,EACfF,cAAY,IAEd,kBAAC,GAAD,CAAMX,KAAMA,KAEb2G,EACD,kBAACF,GAAD,CAAaG,wBAAyB,CAAEC,OAAQnF,O,wwBCjDtD,IAAMoF,GAAahM,IAAOC,IAAV,MAaVgM,GAAgBjM,IAAOC,IAAV,MAmBba,GAAed,YAAOgB,EAAPhB,CAAH,MAiCHkM,GA3BE,SAAC,GAQX,IAPLC,EAOI,EAPJA,QACAxF,EAMI,EANJA,MACAyF,EAKI,EALJA,YAKI,IAJJC,mBAII,MAJU,eAIV,MAHJC,kBAGI,MAHS,eAGT,EAFJC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEA,OAAKL,EAGH,kBAACH,GAAD,KACE,kBAACC,GAAD,KACE,4BAAKtF,GACL,2BAAIyF,GACJ,yBAAK3K,UAAU,WACb,kBAAC,GAAD,CAAcE,QAAS6K,GAAWF,GAClC,kBAAC,GAAD,CAAc/L,MAAI,EAACoB,QAAS4K,GACzBF,MAVU,MCnCRI,GAbQ,SAAC,GAAsC,IAApCN,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC5C,OACE,kBAAC,GAAD,CACEL,QAASA,EACTxF,MAAM,kCACNyF,YAAY,0FACZC,YAAY,eACZE,UAAWA,EACXC,SAAUA,K,+fCNhB,I,GAAME,GAAyB1M,IAAOC,IAAV,MAOtB0M,GAAe3M,IAAOe,OAAV,KAGPV,EAAQC,KAAK,GAQND,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAmCXqM,GA5BW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAAe,EACxBxC,oBAAS,GADe,mBAC3CyC,EAD2C,KACpCC,EADoC,KAalD,OACE,oCACE,kBAACN,GAAD,KACE,kBAACC,GAAD,CAAchL,QAASkL,GAAvB,gBACA,kBAACF,GAAD,CAAchL,QAAS,WAd3BqL,GAAS,KAcL,iBAEF,kBAAC,GAAD,CACEb,QAASY,EACTR,UAbY,WAChBS,GAAS,GACTF,KAYIN,SAjBW,WACfQ,GAAS,Q,YCMIC,I,GAhCkC5K,EACjD,oB,qBADK6K,G,MAAYC,G,MAAeC,G,SAQ9B/K,EAAyB,qB,qBAH3BgL,G,MACAC,G,MACAC,G,MAGWC,GAAkB3L,YAZL,2BAYqC,SAAAwB,GAAI,OAAIA,KAE1DoK,GAAY5L,YAhBN,oBAiBN2G,GAAc3G,YAhBN,sBAgBiC,kBAAqB,CACzEyE,IADoD,EAAGA,IAEvDoC,MAFoD,EAAQA,UAKjDgF,GAAY7L,YAAaqL,IAAY,kBAA4B,CAC5EvG,MADgD,EAAGA,MAEnDC,KAFgD,EAAUA,KAG1D1B,KAHgD,EAAgBA,SAMrDyI,GAAa9L,YACxBwL,IACA,kBAAgC,CAAE/B,GAAlC,EAAGA,GAAmC3E,MAAtC,EAAOA,MAAsCC,KAA7C,EAAcA,KAAqC1B,KAAnD,EAAoBA,SAGhB0I,GAAgBrL,EAAkB2K,IpBtCf,SAAC,GAAD,IAAGvG,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAM1B,EAAhB,EAAgBA,KAAhB,OACvBjC,EAAOI,KAAK,aAAc,CAAEsD,QAAOC,OAAM1B,YoBsCrC2I,GAAiBtL,EAAkB8K,IpB7Bf,SAAC,GAAD,IAAG/B,EAAH,EAAGA,GAAI3E,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAM1B,EAApB,EAAoBA,KAApB,OACxBjC,EAAO6K,MAAP,qBAA2BxC,GAAM3E,EAAOC,EAAM1B,MoB8BzC,SAAU+H,KAAV,iEACL,OADK,SACC1I,YAAW2I,GAAYU,IADxB,OAEL,OAFK,SAECrJ,YAAW8I,GAAaQ,IAFzB,wCAIP,IAAM5E,GAAe,CACnBtC,MAAO,GACPC,KAAM,GACN1B,KAAM,GACN7B,KAAM,KACN0K,UAAW,KACXC,eAAgB,MAmCHC,GAhCDhM,aAAa,kBAAC,GAjDT,oBAmDD,SAAAC,GAAK,OAAI+G,MAFA,YAAC,GAhDP,sBAmDD,SAAC/G,EAAD,WAAUE,QAAWkE,EAArB,EAAqBA,IAAKoC,EAA1B,EAA0BA,MAA1B,sBACXxG,EADW,eAEboE,EAAMoC,OALc,YAAC,GAOvBwE,IAAa,SAAAhL,GAAK,sBAAUA,EAAV,CAAiBmB,KAAM,KAAM0K,UAAW,UAPpC,YAAC,GAQvBZ,IAAgB,SAACjL,EAAD,OAAmBmB,EAAnB,EAAUjB,QAAV,sBACZF,EADY,CAEfmB,KAAMA,OAVe,YAAC,GAYvB+J,IAAgB,SAAClL,EAAD,OAAmB6L,EAAnB,EAAU3L,QAAV,sBACZF,EADY,CAEf6L,iBAdqB,YAAC,GA/CF,2BA+DD,SAAC7L,EAAD,OAAmBmB,EAAnB,EAAUjB,QAAV,sBAChBF,EADgB,CAEnByE,MAAOtD,EAAKsD,MACZC,KAAMvD,EAAKuD,KACX1B,KAAM7B,EAAK6B,KACX8I,eAAgB3K,EAAKwD,SArBA,YAAC,GAuBvByG,IAAsB,SAACpL,EAAD,OAAmBmB,EAAnB,EAAUjB,QAAV,sBAAoCF,EAApC,CAA2CmB,YAvB3C,YAAC,GAwBvBkK,IAAsB,SAACrL,EAAD,OAAmB6L,EAAnB,EAAU3L,QAAV,sBAClBF,EADkB,CAErB6L,iBA1BqB,IA6BzB9E,IC9BajC,gBA/Ca,SAAC,GAAwB,IAAtBkH,EAAqB,EAArBA,MAAO7D,EAAc,EAAdA,QAC5B8D,EAAWD,EAAME,OAAjBD,OACFxJ,EAAWC,cAFiC,EAGXF,aACrC,gBAAGrB,EAAH,EAAGA,KAAMrB,EAAT,EAASA,QAAST,EAAlB,EAAkBA,KAAlB,MAA8B,CAC5B8B,KAAMA,EAAKA,KACXL,MAAOK,EAAKL,MACZhB,QAASA,EAAQ,kBACjBT,KAAMA,EAAKA,SALP8B,EAH0C,EAG1CA,KAAML,EAHoC,EAGpCA,MAAOhB,EAH6B,EAG7BA,QAAST,EAHoB,EAGpBA,KAS9B2F,qBAAU,WAGR,OAFAvC,EAAS0G,GAAS8C,IAEX,WACLxJ,EAAS4G,SAEV,CAAC5G,EAAUwJ,IAEd,IAaME,GAAW9M,GAAQA,EAAKsF,QAAUxD,GAAQA,EAAK9B,KAAKsF,KAE1D,OACE,kBAAC,GAAD,CACExD,KAAMA,EACNrB,QAASA,EACTgB,MAAOA,EACP6I,cACEwC,GAAW,kBAAC,GAAD,CAAmBxB,OArBrB,WACblI,EAAS6I,GAAgBnK,IACzBgH,EAAQG,KAAK,WAmBqCsC,SAhBnC,oBAAAwB,EAAAC,OAAA,2EAAAD,EAAA,OrBlBOhD,EqBoBH6C,ErBpBSlL,EAAOuL,OAAP,qBAA4BlD,MqBkBzC,OAGbjB,EAAQG,KAAK,KAHA,+CAKbpG,QAAQC,IAAR,MALa,iCrBlBO,IAAAiH,IqBkBP,2BCpBJmD,GATE,WACf,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,unCCJN,IAAMC,GAAc1O,IAAOC,IAAV,KAESI,EAAQC,KAAK,GAE1BD,EAAQC,KAAK,IAMpBqO,GAAU3O,IAAOyI,KAAV,KAKSpI,EAAQC,KAAK,GAkBjBD,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAK3BsO,GAAM5O,IAAOC,IAAV,KAEEI,EAAQC,KAAK,IAOlBuO,GAAe7O,IAAOC,IAAV,MAKZ6O,GAAUC,IAAMC,MAAK,gBAAG3I,EAAH,EAAGA,IAAKyG,EAAR,EAAQA,SAAR,OACzB,kBAAC8B,GAAD,CAAKjN,QAAS,kBAAMmL,EAASzG,KAA7B,IAAqCA,MAGjC4I,GAAUF,IAAMC,MAAK,gBAAG9J,EAAH,EAAGA,KAAM4H,EAAT,EAASA,SAAT,OACzB,kBAAC+B,GAAD,KACG3J,EAAKkB,KAAI,SAAAC,GAAG,OACX,kBAACyI,GAAD,CAASxI,IAAKD,EAAKA,IAAKA,EAAKyG,SAAUA,WA8D9BoC,GAzDA,SAAC,GAA4B,IAA1BhK,EAAyB,EAAzBA,KAAMiK,EAAmB,EAAnBA,aAAmB,EACf7E,mBAAS,IADM,mBAClCZ,EADkC,KAC3B0F,EAD2B,OAEP9E,mBAAS,IAFF,mBAElC+E,EAFkC,KAEvBC,EAFuB,KAInCC,EAAYC,uBAChB,SAAAnJ,GACE,GAAKA,IACDgJ,EAAUtE,SAAS1E,GAAvB,CACA,IAAMoJ,EAAQ,uBAAOJ,GAAP,CAAkBhJ,IAChCiJ,EAAaG,GACbN,EAAaM,MAEf,CAACJ,EAAWF,IAGRrC,EAAW0C,uBACf,SAAAnJ,GACE,IAAMoJ,EAAWJ,EAAUK,QAAO,SAAAC,GAAC,OAAIA,IAAMtJ,KAC7CiJ,EAAaG,GACbN,EAAaM,KAEf,CAACJ,EAAWF,IAGRpF,EAAWyF,uBAAY,SAAArL,GAC3BiL,EAASjL,EAAEwG,OAAOjC,SACjB,IAEGsB,EAAWwF,uBACf,SAAArL,GACEA,EAAEyG,iBACF2E,EAAU7F,EAAMkG,QAChBR,EAAS,MAEX,CAAC1F,EAAO6F,IAOV,OAJArI,qBAAU,WACRoI,EAAapK,KACZ,CAACA,IAGF,kBAACwJ,GAAD,KACE,4CACA,kBAACC,GAAD,CAAS3E,SAAUA,GACjB,2BACE6F,WAAW,oDACXnH,MAAOgB,EACPK,SAAUA,IAEZ,4BAAQzH,KAAK,UAAb,iBAEF,kBAAC2M,GAAD,CAAS/J,KAAMmK,EAAWvC,SAAUA,MC9G3BgD,GAVS,WACtB,IAAMnL,EAAWC,cACXM,EAAOR,aAAY,SAAAxC,GAAK,OAAIA,EAAM+L,MAAM/I,QAK9C,OAAO,kBAAC,GAAD,CAAQiK,aAHM,SAAAM,GACnB9K,EAAS6D,GAAY,CAAElC,IAAK,OAAQoC,MAAO+G,MAEFvK,KAAMA,K,+qBCJnD,IAAM6K,GAAc/P,YAAOE,EAAPF,CAAH,MAMXgQ,GAAahQ,IAAO0J,MAAV,KAKarJ,EAAQC,KAAK,IAKpC2P,GAAejQ,IAAOC,IAAV,MA8DHiQ,GAlDA,SAAC,GAAoC,IAAlCvJ,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAMuJ,EAAoB,EAApBA,cACvBC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAE7BnJ,qBAAU,WACRoJ,EAAcC,QAAU,IAAIC,KAAMJ,EAAaG,QAAS,CACtDE,MAAO,SACPrG,YAAa,uDACbsG,QAAS,CACPC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,MAC5B,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,OAAQ,aAAc,OAAQ,aAMrC,IAAMC,EAAQR,EAAcC,QAC5BO,EAAMC,GAAG,eAAe,SAACC,EAAOC,EAAUC,GACzB,SAAXA,GACFf,EAAc,CAAE7J,IAAK,OAAQoC,MAAOoI,EAAMK,KAAKC,iBAGlD,CAACjB,IAEJ,IAAMkB,EAAUhB,kBAAO,GACvBnJ,qBAAU,WACJmK,EAAQd,UACZc,EAAQd,SAAU,EAClBD,EAAcC,QAAQY,KAAKC,UAAYxK,KACtC,CAACA,IAIJ,OACE,kBAACmJ,GAAD,KACE,kBAACC,GAAD,CACE5F,YAAY,oDACZL,SAPgB,SAAA5F,GACpBgM,EAAc,CAAE7J,IAAK,QAASoC,MAAOvE,EAAEwG,OAAOjC,SAO1CA,MAAO/B,IAET,kBAACsJ,GAAD,KACE,yBAAKqB,IAAKlB,OCxDHmB,GAlBS,WACtB,IAAM5M,EAAWC,cADW,EAEJF,aAAY,gBAAGuJ,EAAH,EAAGA,MAAH,MAAgB,CAClDtH,MAAOsH,EAAMtH,MACbC,KAAMqH,EAAMrH,SAFND,EAFoB,EAEpBA,MAAOC,EAFa,EAEbA,KAITuJ,EAAgBX,uBAAY,SAAApN,GAAO,OAAIuC,EAAS6D,GAAYpG,MAAW,CAC3EuC,IAQF,OALAuC,qBAAU,WACR,OAAO,WACLvC,EAAS8I,SAEV,CAAC9I,IACG,kBAAC,GAAD,CAAQwL,cAAeA,EAAexJ,MAAOA,EAAOC,KAAMA,K,kTChBnE,IAAM4K,GAA0BxR,IAAOC,IAAV,MAQvBa,GAAed,YAAOgB,EAAPhB,CAAH,MAiBHyR,GAXY,SAAC,GAAqC,IAAnCjF,EAAkC,EAAlCA,SAAUkF,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACjD,OACE,kBAACH,GAAD,KACE,kBAAC,GAAD,CAAcjR,MAAI,EAACoB,QAAS+P,GAA5B,sBACOC,EAAS,gBAAQ,gBAExB,kBAAC,GAAD,CAAchQ,QAAS6K,GAAvB,kBCuBSxF,gBAzCqB,SAAC,GAAiB,IAAfqD,EAAc,EAAdA,QAC/B1F,EAAWC,cADkC,EAEYF,aAC7D,gBAAGuJ,EAAH,EAAGA,MAAH,MAAgB,CACdtH,MAAOsH,EAAMtH,MACbC,KAAMqH,EAAMrH,KACZ1B,KAAM+I,EAAM/I,KACZ7B,KAAM4K,EAAM5K,KACZ0K,UAAWE,EAAMF,UACjBC,eAAgBC,EAAMD,mBAPlBrH,EAF2C,EAE3CA,MAAOC,EAFoC,EAEpCA,KAAM1B,EAF8B,EAE9BA,KAAM7B,EAFwB,EAExBA,KAAM0K,EAFkB,EAElBA,UAAWC,EAFO,EAEPA,eA8B5C,OATA9G,qBAAU,WACR,GAAI7D,EAAM,CAAC,IACDwD,EAAcxD,EAAdwD,IAAKtF,EAAS8B,EAAT9B,KACb8I,EAAQG,KAAR,YAAkBjJ,EAAKG,SAAvB,YAAmCmF,IAEjCkH,GACF3J,QAAQC,IAAI0J,KAEb,CAAC1D,EAAShH,EAAM0K,IAEjB,kBAAC,GAAD,CACE2D,UAtBc,WACZ1D,GACFrJ,EAASgJ,GAAW,CAAEhH,QAAOC,OAAM1B,OAAMoG,GAAI0C,KAE/CrJ,EAAS+I,GAAU,CAAE/G,QAAOC,OAAM1B,WAmBhCsH,SAhBa,WACfnC,EAAQuH,UAgBND,OAAQ3D,OCvBC6D,GAbG,WAChB,OACE,kBAAC,EAAD,KACE,kBAAC,KAAD,KACE,2EAEF,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCUSC,GAfH,WACV,OACE,oCACE,kBAAC,KAAD,KACE,4CAEF,kBAAC,IAAD,CAAOC,UAAWlK,GAAcmK,KAAM,CAAC,cAAe,KAAMC,OAAK,IACjE,kBAAC,IAAD,CAAOF,UAAWtD,GAAUuD,KAAM,wBAClC,kBAAC,IAAD,CAAOD,UAAWlH,GAAWmH,KAAM,WACnC,kBAAC,IAAD,CAAOD,UAAWF,GAAWG,KAAM,WACnC,kBAAC,IAAD,CAAOD,UAAW/G,GAAcgH,KAAM,gBCPxBE,QACW,cAA7BC,OAAOlL,SAASmL,UAEe,UAA7BD,OAAOlL,SAASmL,UAEhBD,OAAOlL,SAASmL,SAASlE,MACvB,2D,yBCAWmE,IAAV,SAAUA,KAAV,iEACL,OADK,SACCC,YAAI,CAACrK,KAAY1E,KAAY0J,KAAahC,KAAYpG,OADvD,wCAGQ0N,OAZKC,2BAAgB,CAClCrJ,QACAnH,UACAT,QACA0M,SACA5K,QACAmC,W,kBCFIiN,GAAiBC,eACjBC,GAAQC,uBACZL,GACAM,+BAAoBC,2BAAgBL,MAetCA,GAAeM,IAAIV,IAZnB,WACE,IACE,IAAM9Q,EAAO0C,aAAa+O,QAAQ,QAClC,IAAKzR,EAAM,OAEXoR,GAAMhO,SAASf,GAAYrC,IAC3BoR,GAAMhO,SAASd,MACf,MAAOM,GACPC,QAAQC,IAAI,gCAKhB4O,GACAC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,KAAD,KACE,kBAAC,GAAD,SAINS,SAASC,eAAe,SF0FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.797d1f5e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  /* 1024px이상이면 1024px를 줘라 */\n  width: 1024px;\n  margin: 0 auto; /* 중앙정렬 */\n  /* 1024px이하 768아상은 768px */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  /* 768px이하 width= 100%주어라 */\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style,className,onClick,onMouseMove 등의 props을 사용할 수 있도록\n  // ...rest를 이용해서  ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\n\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529',\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285',\n  ],\n};\n\nexport default palette;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n\n  &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n\n  ${props =>\n    props.fullWidth &&\n    css`\n      /* 글자와 block 사이의 간격 */\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n  ${props =>\n    props.cyan &&\n    css`\n      background: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n`;\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\nconst Button = props => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from './Responsive';\nimport Button from './Button';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n// 순서대로\n// 높이가 4rem, 물 흐르듯이, 상하 맞추기, 좌우 너비 조정\n// 글자크기 1.125배,(0~949) 진하게, 글자 간격 2px\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 949;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            REACTERS\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType,\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType,\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState,\n);\n\nexport default loading;\n","import { startLoading, finishLoading } from '../modules/loading';\nimport { call, put } from 'redux-saga/effects';\n\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function*(action) {\n    yield put(startLoading(type));\n    try {\n      const response = yield call(request, action.payload);\n      yield put({ type: SUCCESS, payload: response.data, meta: response });\n    } catch (e) {\n      yield put({ type: FAILURE, payload: e, error: true });\n    }\n    yield put(finishLoading(type));\n  };\n}\n","import axios from 'axios';\n\nconst client = axios.create();\n/*\n // API 주소를 다른곳으로 설정\nclient.defaults.baseURL = 'https://external-api-server.com/';\n// 헤더 설정\nclient.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n// 인터셉터 설정\naxios.intercepter.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    return Promise.reject(error);\n  },\n );\n*/\n\nexport default client;\n","import client from './client';\n\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\nexport const check = () => client.get('/api/auth/check');\n\nexport const logout = () => client.post('/api/auth/logout');\n","import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest, call } from 'redux-saga/effects';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); //localStorage에서 user를 제거\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout);\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: state => ({ ...state, user: null }),\n  },\n  initialState,\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tags, username, page }) => ({ tags, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\n\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = { posts: null, error: null, lastPage: 1 };\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10),\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import client from './client';\nimport qs from 'qs';\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = id => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tags }) => {\n  const queryString = qs.stringify({ page, username, tags });\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`/api/posts/${id}`, title, body, tags);\n\nexport const removePost = id => client.delete(`/api/posts/${id}`);\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst SubInfoBlock = styled.div`\n  ${props =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7';\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map(tag => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport Responsive from '../common/Responsive';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 2rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n    p {\n      margin-top: 2rem;\n    }\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      ></SubInfo>\n      <Tags tags={tags}></Tags>\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n\n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan to=\"/write\">\n            새 글 작성하기\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {/* 로딩 중이 아니고, 포스트배열이 존재할 때만 보여 줌 */}\n      {!loading && posts && (\n        <div>\n          {posts.map(post => (\n            <PostItem post={post} key={post._id} />\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\n\nexport default PostList;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport qs from 'qs';\nimport { listPosts } from '../../modules/posts';\nimport PostList from '../../components/posts/PostList';\nimport { withRouter } from 'react-router-dom';\nconst PostListContainer = ({ location }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    const { tag, username, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search]);\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\n\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport qs from 'qs';\nimport Pagination from '../../components/posts/Pagination';\nimport { withRouter } from 'react-router-dom';\nconst PaginationContainer = ({ location }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n  if (!posts || loading) return null;\n\n  const { tag, username, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostListContainer from '../containers/posts/PostListContainer';\nimport PaginationContainer from '../containers/posts/PaginationContainer';\n\nconst PostListPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContainer />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\nconst AuthTemplateBlock = styled.div`\n  position: absolute;\n  /* 모든 것을 0으로 해야 모든 화면을 잡음 */\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  /* 플렉스로 내부 내용 중앙 정렬 ? */\n  display: flex;\n  flex-direction: column;\n  /* 상하의 중심 */\n  justify-content: center;\n  /* 좌우의 중심 */\n  align-items: center;\n`;\nconst WhiteBox = styled.div`\n  .logo-area {\n    display: block;\n    padding-bottom: 2rem;\n    /* 좌우 간격 중심 */\n    text-align: center;\n    font-weight: bold;\n    /* 글자 간격 */\n    letter-spacing: 2px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0.025);\n  /* 내부에서으로부터 패딩 */\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  /* 필렛 */\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateBlock>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">REACTERS</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateBlock>\n  );\n};\n\nexport default AuthTemplate;\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst CHANGE_FIELD = 'auth/CHANEGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n  'auth/REGISTER',\n);\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n  'auth/LOGIN',\n);\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, //register,login\n    key, // username,password,passwordConfirm\n    value, // 실제 바꾸려는 값\n  }),\n);\n\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register, login\n\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password,\n}));\n\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\n\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, draft => {\n        draft[form][key] = value;\n      }),\n    [INITIALIZE_FORM]: (state, { payload: { form } }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null, // form 전환 시 회원 인증 에러 초기화\n    }),\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n  },\n  initialState,\n);\n\nexport default auth;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    margin: 0;\n    color: ${palette.gray[8]};\n    /*  바닥으로부터 마진 */\n    margin-bottom: 1rem;\n  }\n`;\n\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  /* 모서리선 삭제 */\n  border: none;\n  /* 밑 줄 긋기 */\n  border-bottom: 1px solid ${palette.gray[5]};\n  /* 글자와 밑줄 사이의 틈을 두기 */\n  padding-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal-7;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 1rem;\n  }\n`;\n\nconst Footer = styled.div`\n  /* 위의 엘리먼트과의 간격 */\n  margin-top: 1rem;\n  text-align: right;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    :hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWithMarginTop = styled(Button)`\n  margin-top: 1rem;\n`;\nconst textMap = { login: '로그인', register: '회원가입' };\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          ></StyledInput>\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWithMarginTop cyan fullWidth onClick={onSubmit}>\n          {text}\n        </ButtonWithMarginTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst LoginForm = ({ history }) => {\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  const [error, setError] = useState(null);\n\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(changeField({ form: 'login', key: name, value }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password } = form;\n    dispatch(login({ username, password }));\n  };\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      console.log('오류 발생');\n      console.log(authError);\n      setError('로그인 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('login 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('LocalStorage is not working');\n      }\n    }\n  }, [user, history]);\n\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(LoginForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(changeField({ form: 'register', key: name, value }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      if ((authError.response.status = 409)) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      console.log('회원 가입 실패');\n\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('LocalStorage is not working');\n      }\n    }\n  }, [user, history]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm></RegisterForm>\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport { createAction, handleActions } from 'redux-actions';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\n\nconst UNLOAD_POST = 'post/UNLOAD_POST';\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\n\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = { post: null, error: null };\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({ ...state, post }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Helmet } from 'react-helmet-async';\n\nconst PostViewerBlock = styled.div`\n  margin-top: 4rem;\n`;\n\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ actionButtons, post, error, loading }) => {\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <PostViewerBlock>존재하지 않는 포스트 입니다.</PostViewerBlock>;\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n  }\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} -REACTERS</title>\n      </Helmet>\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      {actionButtons}\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '삭제',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={() => onRemoveClick()}>삭제</ActionButton>\n      </PostActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\n\nconst [WRITE_POST, WRTIE_SUCCESS, WRITE_FAILURE] = createRequestActionTypes(\n  'write/WRITE_POST',\n);\n\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST');\n\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\n\nexport const initalize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\n\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({ id, title, body, tags }),\n);\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [WRITE_POST]: state => ({ ...state, post: null, postError: null }),\n    [WRTIE_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post: post,\n    }),\n    [WRITE_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({ ...state, post }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport { withRouter } from 'react-router-dom';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\nconst PostViewerContainer = ({ match, history }) => {\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트 될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  h4 {\n    color: ${palette.gray[8]};\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화??? */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n  input {\n    padding: 0.5rem;\n    flex: 1;\n    /* 찌그러짐 방지 */\n    min-width: 0;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\nconst TagItem = React.memo(({ tag, onRemove }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>\n    {tags.map(tag => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove}></TagItem>\n    ))}\n  </TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    tag => {\n      if (!tag) return; //  공백이면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    tag => {\n      const nextTags = localTags.filter(t => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞 뒤 공백 없앤 후 등록\n      setInput('');\n    },\n    [input, insertTag],\n  );\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholde=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField } from '../../modules/write';\nimport TagBox from '../../components/write/TagBox';\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const tags = useSelector(state => state.write.tags);\n\n  const onChangeTags = nextTags => {\n    dispatch(changeField({ key: 'tags', value: nextTags }));\n  };\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport 'quill/dist/quill.bubble.css';\nimport Quill from 'quill';\nimport palette from '../../lib/styles/palette';\n\nconst EditorBlock = styled(Responsive)`\n  /* 페이지 위아래 여백지정 */\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\n\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\n\nconst QuillWrapper = styled.div`\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor .ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement\n  const quillInstance = useRef(null); // Quill 인스턴스 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['bold', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n  const onChangeTitle = e => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement}></div>\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initalize } from '../../modules/write';\nimport Editor from '../../components/write/Editor';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\n    dispatch,\n  ]);\n  // 언마운트 될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initalize());\n    };\n  }, [dispatch]);\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n// TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정 ' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { writePost, updatePost } from '../../modules/write';\n\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { withRouter } from 'react-router-dom';\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n    }\n    dispatch(writePost({ title, body, tags }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n  // 성공 혹은 실패 시 할  작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\nimport Responsive from '../components/common/Responsive';\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\nimport EditorContainer from '../containers/write/EditorContainer';\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\nimport { Helmet } from 'react-helmet-async';\nconst WritePage = () => {\n  return (\n    <Responsive>\n      <Helmet>\n        <title> 새 글 작성하기</title>\n      </Helmet>\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport PostPage from './pages/PostPage';\nimport WritePage from './pages/WritePage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={PostPage} path={'/@:username/:postId'} />\n      <Route component={LoginPage} path={'/login'} />\n      <Route component={WritePage} path={'/write'} />\n      <Route component={RegisterPage} path={'/register'} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport { all } from 'redux-saga/effects';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer, { rootSaga } from './modules';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return;\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}